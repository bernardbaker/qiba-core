// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TelegramMiniApp_InitData_FullMethodName            = "/chat.TelegramMiniApp/InitData"
	TelegramMiniApp_SendMessage_FullMethodName         = "/chat.TelegramMiniApp/SendMessage"
	TelegramMiniApp_GetUserInfo_FullMethodName         = "/chat.TelegramMiniApp/GetUserInfo"
	TelegramMiniApp_CreateChat_FullMethodName          = "/chat.TelegramMiniApp/CreateChat"
	TelegramMiniApp_GetChatsForUser_FullMethodName     = "/chat.TelegramMiniApp/GetChatsForUser"
	TelegramMiniApp_GetMessagesFromChat_FullMethodName = "/chat.TelegramMiniApp/GetMessagesFromChat"
	TelegramMiniApp_SendMediaMessage_FullMethodName    = "/chat.TelegramMiniApp/SendMediaMessage"
	TelegramMiniApp_DeleteMessage_FullMethodName       = "/chat.TelegramMiniApp/DeleteMessage"
	TelegramMiniApp_GetBotInfo_FullMethodName          = "/chat.TelegramMiniApp/GetBotInfo"
	TelegramMiniApp_JoinChat_FullMethodName            = "/chat.TelegramMiniApp/JoinChat"
	TelegramMiniApp_LeaveChat_FullMethodName           = "/chat.TelegramMiniApp/LeaveChat"
	TelegramMiniApp_PinMessage_FullMethodName          = "/chat.TelegramMiniApp/PinMessage"
	TelegramMiniApp_UnpinMessage_FullMethodName        = "/chat.TelegramMiniApp/UnpinMessage"
	TelegramMiniApp_ProcessPayment_FullMethodName      = "/chat.TelegramMiniApp/ProcessPayment"
)

// TelegramMiniAppClient is the client API for TelegramMiniApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Telegram Mini App Service Definition
type TelegramMiniAppClient interface {
	// Method to initialize the Mini App with init_data
	InitData(ctx context.Context, in *InitDataRequest, opts ...grpc.CallOption) (*InitDataResponse, error)
	// Method to send a text message
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// Method to get user info by user ID
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// Method to create a new chat (private or group)
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error)
	// Method to get all chats the user is part of
	GetChatsForUser(ctx context.Context, in *GetChatsForUserRequest, opts ...grpc.CallOption) (*GetChatsResponse, error)
	// Method to get messages from a chat
	GetMessagesFromChat(ctx context.Context, in *GetMessagesFromChatRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	// Method to send media messages (photo, video, etc.)
	SendMediaMessage(ctx context.Context, in *SendMediaMessageRequest, opts ...grpc.CallOption) (*SendMediaMessageResponse, error)
	// Method to delete a message
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	// Method to get bot's information
	GetBotInfo(ctx context.Context, in *GetBotInfoRequest, opts ...grpc.CallOption) (*GetBotInfoResponse, error)
	// Method to join a chat
	JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*JoinChatResponse, error)
	// Method to leave a chat
	LeaveChat(ctx context.Context, in *LeaveChatRequest, opts ...grpc.CallOption) (*LeaveChatResponse, error)
	// Method to pin a message
	PinMessage(ctx context.Context, in *PinMessageRequest, opts ...grpc.CallOption) (*PinMessageResponse, error)
	// Method to unpin a message
	UnpinMessage(ctx context.Context, in *UnpinMessageRequest, opts ...grpc.CallOption) (*UnpinMessageResponse, error)
	// Method to process a payment
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error)
}

type telegramMiniAppClient struct {
	cc grpc.ClientConnInterface
}

func NewTelegramMiniAppClient(cc grpc.ClientConnInterface) TelegramMiniAppClient {
	return &telegramMiniAppClient{cc}
}

func (c *telegramMiniAppClient) InitData(ctx context.Context, in *InitDataRequest, opts ...grpc.CallOption) (*InitDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitDataResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_InitData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_CreateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) GetChatsForUser(ctx context.Context, in *GetChatsForUserRequest, opts ...grpc.CallOption) (*GetChatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatsResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_GetChatsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) GetMessagesFromChat(ctx context.Context, in *GetMessagesFromChatRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_GetMessagesFromChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) SendMediaMessage(ctx context.Context, in *SendMediaMessageRequest, opts ...grpc.CallOption) (*SendMediaMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMediaMessageResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_SendMediaMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) GetBotInfo(ctx context.Context, in *GetBotInfoRequest, opts ...grpc.CallOption) (*GetBotInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBotInfoResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_GetBotInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*JoinChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinChatResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_JoinChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) LeaveChat(ctx context.Context, in *LeaveChatRequest, opts ...grpc.CallOption) (*LeaveChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveChatResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_LeaveChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) PinMessage(ctx context.Context, in *PinMessageRequest, opts ...grpc.CallOption) (*PinMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinMessageResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_PinMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) UnpinMessage(ctx context.Context, in *UnpinMessageRequest, opts ...grpc.CallOption) (*UnpinMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpinMessageResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_UnpinMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramMiniAppClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessPaymentResponse)
	err := c.cc.Invoke(ctx, TelegramMiniApp_ProcessPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelegramMiniAppServer is the server API for TelegramMiniApp service.
// All implementations must embed UnimplementedTelegramMiniAppServer
// for forward compatibility.
//
// Telegram Mini App Service Definition
type TelegramMiniAppServer interface {
	// Method to initialize the Mini App with init_data
	InitData(context.Context, *InitDataRequest) (*InitDataResponse, error)
	// Method to send a text message
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// Method to get user info by user ID
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// Method to create a new chat (private or group)
	CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error)
	// Method to get all chats the user is part of
	GetChatsForUser(context.Context, *GetChatsForUserRequest) (*GetChatsResponse, error)
	// Method to get messages from a chat
	GetMessagesFromChat(context.Context, *GetMessagesFromChatRequest) (*GetMessagesResponse, error)
	// Method to send media messages (photo, video, etc.)
	SendMediaMessage(context.Context, *SendMediaMessageRequest) (*SendMediaMessageResponse, error)
	// Method to delete a message
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	// Method to get bot's information
	GetBotInfo(context.Context, *GetBotInfoRequest) (*GetBotInfoResponse, error)
	// Method to join a chat
	JoinChat(context.Context, *JoinChatRequest) (*JoinChatResponse, error)
	// Method to leave a chat
	LeaveChat(context.Context, *LeaveChatRequest) (*LeaveChatResponse, error)
	// Method to pin a message
	PinMessage(context.Context, *PinMessageRequest) (*PinMessageResponse, error)
	// Method to unpin a message
	UnpinMessage(context.Context, *UnpinMessageRequest) (*UnpinMessageResponse, error)
	// Method to process a payment
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error)
	mustEmbedUnimplementedTelegramMiniAppServer()
}

// UnimplementedTelegramMiniAppServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTelegramMiniAppServer struct{}

func (UnimplementedTelegramMiniAppServer) InitData(context.Context, *InitDataRequest) (*InitDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitData not implemented")
}
func (UnimplementedTelegramMiniAppServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedTelegramMiniAppServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedTelegramMiniAppServer) CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedTelegramMiniAppServer) GetChatsForUser(context.Context, *GetChatsForUserRequest) (*GetChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatsForUser not implemented")
}
func (UnimplementedTelegramMiniAppServer) GetMessagesFromChat(context.Context, *GetMessagesFromChatRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesFromChat not implemented")
}
func (UnimplementedTelegramMiniAppServer) SendMediaMessage(context.Context, *SendMediaMessageRequest) (*SendMediaMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMediaMessage not implemented")
}
func (UnimplementedTelegramMiniAppServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedTelegramMiniAppServer) GetBotInfo(context.Context, *GetBotInfoRequest) (*GetBotInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotInfo not implemented")
}
func (UnimplementedTelegramMiniAppServer) JoinChat(context.Context, *JoinChatRequest) (*JoinChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedTelegramMiniAppServer) LeaveChat(context.Context, *LeaveChatRequest) (*LeaveChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChat not implemented")
}
func (UnimplementedTelegramMiniAppServer) PinMessage(context.Context, *PinMessageRequest) (*PinMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinMessage not implemented")
}
func (UnimplementedTelegramMiniAppServer) UnpinMessage(context.Context, *UnpinMessageRequest) (*UnpinMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpinMessage not implemented")
}
func (UnimplementedTelegramMiniAppServer) ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedTelegramMiniAppServer) mustEmbedUnimplementedTelegramMiniAppServer() {}
func (UnimplementedTelegramMiniAppServer) testEmbeddedByValue()                         {}

// UnsafeTelegramMiniAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelegramMiniAppServer will
// result in compilation errors.
type UnsafeTelegramMiniAppServer interface {
	mustEmbedUnimplementedTelegramMiniAppServer()
}

func RegisterTelegramMiniAppServer(s grpc.ServiceRegistrar, srv TelegramMiniAppServer) {
	// If the following call pancis, it indicates UnimplementedTelegramMiniAppServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TelegramMiniApp_ServiceDesc, srv)
}

func _TelegramMiniApp_InitData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).InitData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_InitData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).InitData(ctx, req.(*InitDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_GetChatsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).GetChatsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_GetChatsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).GetChatsForUser(ctx, req.(*GetChatsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_GetMessagesFromChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesFromChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).GetMessagesFromChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_GetMessagesFromChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).GetMessagesFromChat(ctx, req.(*GetMessagesFromChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_SendMediaMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMediaMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).SendMediaMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_SendMediaMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).SendMediaMessage(ctx, req.(*SendMediaMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_GetBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBotInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).GetBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_GetBotInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).GetBotInfo(ctx, req.(*GetBotInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_JoinChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).JoinChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_JoinChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).JoinChat(ctx, req.(*JoinChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_LeaveChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).LeaveChat(ctx, req.(*LeaveChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_PinMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).PinMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_PinMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).PinMessage(ctx, req.(*PinMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_UnpinMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpinMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).UnpinMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_UnpinMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).UnpinMessage(ctx, req.(*UnpinMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramMiniApp_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramMiniAppServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramMiniApp_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramMiniAppServer).ProcessPayment(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelegramMiniApp_ServiceDesc is the grpc.ServiceDesc for TelegramMiniApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelegramMiniApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.TelegramMiniApp",
	HandlerType: (*TelegramMiniAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitData",
			Handler:    _TelegramMiniApp_InitData_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _TelegramMiniApp_SendMessage_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _TelegramMiniApp_GetUserInfo_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _TelegramMiniApp_CreateChat_Handler,
		},
		{
			MethodName: "GetChatsForUser",
			Handler:    _TelegramMiniApp_GetChatsForUser_Handler,
		},
		{
			MethodName: "GetMessagesFromChat",
			Handler:    _TelegramMiniApp_GetMessagesFromChat_Handler,
		},
		{
			MethodName: "SendMediaMessage",
			Handler:    _TelegramMiniApp_SendMediaMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _TelegramMiniApp_DeleteMessage_Handler,
		},
		{
			MethodName: "GetBotInfo",
			Handler:    _TelegramMiniApp_GetBotInfo_Handler,
		},
		{
			MethodName: "JoinChat",
			Handler:    _TelegramMiniApp_JoinChat_Handler,
		},
		{
			MethodName: "LeaveChat",
			Handler:    _TelegramMiniApp_LeaveChat_Handler,
		},
		{
			MethodName: "PinMessage",
			Handler:    _TelegramMiniApp_PinMessage_Handler,
		},
		{
			MethodName: "UnpinMessage",
			Handler:    _TelegramMiniApp_UnpinMessage_Handler,
		},
		{
			MethodName: "ProcessPayment",
			Handler:    _TelegramMiniApp_ProcessPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	ChatService_SendMessage_FullMethodName   = "/chat.ChatService/SendMessage"
	ChatService_SendBroadcast_FullMethodName = "/chat.ChatService/SendBroadcast"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The chat service definition.
type ChatServiceClient interface {
	// Sends a message from a viewer to the content creator
	SendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	// Content creator sends a message back to a single viewer or all viewers
	SendBroadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, ChatService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SendBroadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, ChatService_SendBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility.
//
// The chat service definition.
type ChatServiceServer interface {
	// Sends a message from a viewer to the content creator
	SendMessage(context.Context, *MessageRequest) (*MessageResponse, error)
	// Content creator sends a message back to a single viewer or all viewers
	SendBroadcast(context.Context, *BroadcastRequest) (*BroadcastResponse, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServiceServer struct{}

func (UnimplementedChatServiceServer) SendMessage(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServiceServer) SendBroadcast(context.Context, *BroadcastRequest) (*BroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBroadcast not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}
func (UnimplementedChatServiceServer) testEmbeddedByValue()                     {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SendBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendBroadcast(ctx, req.(*BroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
		{
			MethodName: "SendBroadcast",
			Handler:    _ChatService_SendBroadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

syntax = "proto3";

package chat;

option go_package = "proto/";

// Message representing a user in the Telegram Mini App
message User {
    int64 user_id = 1;
    string username = 2;
    string first_name = 3;
    string last_name = 4;
    string language_code = 5;
    bool is_bot = 6; // Whether the user is a bot or not
}

// Represents a simple text message
message Message {
    int64 message_id = 1;
    int64 chat_id = 2;
    int64 sender_id = 3;
    string text = 4;
    string timestamp = 5;
}

// Represents a chat
message Chat {
    int64 chat_id = 1;
    string chat_name = 2;
    string chat_type = 3; // "private", "group", "supergroup", etc.
    repeated User participants = 4;
}

// Response to send a message
message SendMessageResponse {
    bool success = 1;
    string error_message = 2;
    Message message = 3;
}

// Request to send a text message
message SendMessageRequest {
    int64 chat_id = 1;
    int64 sender_id = 2;
    string text = 3;
}

message GetChatsForUserRequest {
    int64 user_id = 1;
}

message GetMessagesFromChatRequest {
    int64 chat_id = 1;
}

// Request to get user information
message GetUserInfoRequest {
    int64 user_id = 1;
}

// Response with user information
message GetUserInfoResponse {
    User user = 1;
}

// A request to create a new chat
message CreateChatRequest {
    string chat_name = 1;
    string chat_type = 2; // e.g., "private", "group"
    repeated int64 user_ids = 3;
}

// Response when a chat is created
message CreateChatResponse {
    int64 chat_id = 1;
    string chat_name = 2;
    string chat_type = 3;
    bool success = 4;
    string error_message = 5;
}

// Request for app initialization with init_data
message InitDataRequest {
    string init_data = 1;
}

// Response for app initialization
message InitDataResponse {
    User user = 1;  // User information parsed from init_data
    Chat chat = 2;  // Chat information parsed from init_data
    string bot_name = 3; // Bot information, if applicable
    string payload = 4;  // Optional custom payload
    bool success = 5;
    string error_message = 6;
}

// Response with a list of all chats the user is part of
message GetChatsResponse {
    repeated Chat chats = 1;
}

// Response with a list of messages from a particular chat
message GetMessagesResponse {
    repeated Message messages = 1;
}

// Request to send a media message (e.g., photo, video)
message SendMediaMessageRequest {
    int64 chat_id = 1;
    int64 sender_id = 2;
    string media_url = 3;  // URL of the media file
    string media_type = 4;  // Type of media (e.g., "photo", "video")
    string caption = 5;  // Optional caption
}

// Response for sending media message
message SendMediaMessageResponse {
    bool success = 1;
    string error_message = 2;
    Message message = 3;
}

// Request to delete a message
message DeleteMessageRequest {
    int64 chat_id = 1;
    int64 message_id = 2;
}

// Response to delete a message
message DeleteMessageResponse {
    bool success = 1;
    string error_message = 2;
}

// Request to get the bot's information
message GetBotInfoRequest {}

message BotInfo {
    string bot_name = 1;
    string bot_username = 2;
    string bot_description = 3;
}

message GetBotInfoResponse {
    BotInfo bot_info = 1;
    bool success = 2;
    string error_message = 3;
}

// Request to join a chat
message JoinChatRequest {
    int64 chat_id = 1;
    int64 user_id = 2;
}

// Response for joining a chat
message JoinChatResponse {
    bool success = 1;
    string error_message = 2;
}

// Request to leave a chat
message LeaveChatRequest {
    int64 chat_id = 1;
    int64 user_id = 2;
}

// Response for leaving a chat
message LeaveChatResponse {
    bool success = 1;
    string error_message = 2;
}

// Request to pin a message
message PinMessageRequest {
    int64 chat_id = 1;
    int64 message_id = 2;
}

// Response for pinning a message
message PinMessageResponse {
    bool success = 1;
    string error_message = 2;
}

// Request to unpin a message
message UnpinMessageRequest {
    int64 chat_id = 1;
    int64 message_id = 2;
}

// Response for unpinning a message
message UnpinMessageResponse {
    bool success = 1;
    string error_message = 2;
}

// Payment-related messages (for in-app purchases or donations)
message PaymentInfo {
    string payment_id = 1;
    double amount = 2;  // Payment amount
    string currency = 3;  // Currency, e.g., "USD"
    string description = 4;  // Description of the payment (item, service, etc.)
}

message ProcessPaymentRequest {
    string user_id = 1;
    PaymentInfo payment_info = 2;
}

message ProcessPaymentResponse {
    bool success = 1;
    string error_message = 2;
    string payment_url = 3;  // If payment URL is generated
}

// Telegram Mini App Service Definition
service TelegramMiniApp {

    // Method to initialize the Mini App with init_data
    rpc InitData(InitDataRequest) returns (InitDataResponse);

    // Method to send a text message
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);

    // Method to get user info by user ID
    rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);

    // Method to create a new chat (private or group)
    rpc CreateChat(CreateChatRequest) returns (CreateChatResponse);

    // Method to get all chats the user is part of
    rpc GetChatsForUser(GetChatsForUserRequest) returns (GetChatsResponse);

    // Method to get messages from a chat
    rpc GetMessagesFromChat(GetMessagesFromChatRequest) returns (GetMessagesResponse);

    // Method to send media messages (photo, video, etc.)
    rpc SendMediaMessage(SendMediaMessageRequest) returns (SendMediaMessageResponse);

    // Method to delete a message
    rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);

    // Method to get bot's information
    rpc GetBotInfo(GetBotInfoRequest) returns (GetBotInfoResponse);

    // Method to join a chat
    rpc JoinChat(JoinChatRequest) returns (JoinChatResponse);

    // Method to leave a chat
    rpc LeaveChat(LeaveChatRequest) returns (LeaveChatResponse);

    // Method to pin a message
    rpc PinMessage(PinMessageRequest) returns (PinMessageResponse);

    // Method to unpin a message
    rpc UnpinMessage(UnpinMessageRequest) returns (UnpinMessageResponse);

    // Method to process a payment
    rpc ProcessPayment(ProcessPaymentRequest) returns (ProcessPaymentResponse);
}

// The chat service definition.
service ChatService {
    // Sends a message from a viewer to the content creator
    rpc SendMessage (MessageRequest) returns (MessageResponse);
    
    // Content creator sends a message back to a single viewer or all viewers
    rpc SendBroadcast (BroadcastRequest) returns (BroadcastResponse);
  }
  
  // Message request from a viewer
  message MessageRequest {
    string viewer_id = 1;
    string content = 2;
  }
  
  // Message response after a message is sent
  message MessageResponse {
    string message_id = 1;
    string status = 2;
  }
  
  // Broadcast request from the content creator
  message BroadcastRequest {
    string message = 1;
    repeated string viewers = 2; // list of viewer ids, if empty, send to all
  }
  
  // Broadcast response after broadcasting
  message BroadcastResponse {
    string status = 1;
  }
  
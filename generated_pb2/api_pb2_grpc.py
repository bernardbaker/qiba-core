# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import api_pb2 as api__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TelegramMiniAppStub(object):
    """Telegram Mini App Service Definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitData = channel.unary_unary(
                '/qiba.TelegramMiniApp/InitData',
                request_serializer=api__pb2.InitDataRequest.SerializeToString,
                response_deserializer=api__pb2.InitDataResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/qiba.TelegramMiniApp/SendMessage',
                request_serializer=api__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=api__pb2.SendMessageResponse.FromString,
                _registered_method=True)
        self.GetUserInfo = channel.unary_unary(
                '/qiba.TelegramMiniApp/GetUserInfo',
                request_serializer=api__pb2.GetUserInfoRequest.SerializeToString,
                response_deserializer=api__pb2.GetUserInfoResponse.FromString,
                _registered_method=True)
        self.CreateChat = channel.unary_unary(
                '/qiba.TelegramMiniApp/CreateChat',
                request_serializer=api__pb2.CreateChatRequest.SerializeToString,
                response_deserializer=api__pb2.CreateChatResponse.FromString,
                _registered_method=True)
        self.GetChatsForUser = channel.unary_unary(
                '/qiba.TelegramMiniApp/GetChatsForUser',
                request_serializer=api__pb2.GetChatsForUserRequest.SerializeToString,
                response_deserializer=api__pb2.GetChatsResponse.FromString,
                _registered_method=True)
        self.GetMessagesFromChat = channel.unary_unary(
                '/qiba.TelegramMiniApp/GetMessagesFromChat',
                request_serializer=api__pb2.GetMessagesFromChatRequest.SerializeToString,
                response_deserializer=api__pb2.GetMessagesResponse.FromString,
                _registered_method=True)
        self.SendMediaMessage = channel.unary_unary(
                '/qiba.TelegramMiniApp/SendMediaMessage',
                request_serializer=api__pb2.SendMediaMessageRequest.SerializeToString,
                response_deserializer=api__pb2.SendMediaMessageResponse.FromString,
                _registered_method=True)
        self.DeleteMessage = channel.unary_unary(
                '/qiba.TelegramMiniApp/DeleteMessage',
                request_serializer=api__pb2.DeleteMessageRequest.SerializeToString,
                response_deserializer=api__pb2.DeleteMessageResponse.FromString,
                _registered_method=True)
        self.GetBotInfo = channel.unary_unary(
                '/qiba.TelegramMiniApp/GetBotInfo',
                request_serializer=api__pb2.GetBotInfoRequest.SerializeToString,
                response_deserializer=api__pb2.GetBotInfoResponse.FromString,
                _registered_method=True)
        self.JoinChat = channel.unary_unary(
                '/qiba.TelegramMiniApp/JoinChat',
                request_serializer=api__pb2.JoinChatRequest.SerializeToString,
                response_deserializer=api__pb2.JoinChatResponse.FromString,
                _registered_method=True)
        self.LeaveChat = channel.unary_unary(
                '/qiba.TelegramMiniApp/LeaveChat',
                request_serializer=api__pb2.LeaveChatRequest.SerializeToString,
                response_deserializer=api__pb2.LeaveChatResponse.FromString,
                _registered_method=True)
        self.PinMessage = channel.unary_unary(
                '/qiba.TelegramMiniApp/PinMessage',
                request_serializer=api__pb2.PinMessageRequest.SerializeToString,
                response_deserializer=api__pb2.PinMessageResponse.FromString,
                _registered_method=True)
        self.UnpinMessage = channel.unary_unary(
                '/qiba.TelegramMiniApp/UnpinMessage',
                request_serializer=api__pb2.UnpinMessageRequest.SerializeToString,
                response_deserializer=api__pb2.UnpinMessageResponse.FromString,
                _registered_method=True)
        self.ProcessPayment = channel.unary_unary(
                '/qiba.TelegramMiniApp/ProcessPayment',
                request_serializer=api__pb2.ProcessPaymentRequest.SerializeToString,
                response_deserializer=api__pb2.ProcessPaymentResponse.FromString,
                _registered_method=True)


class TelegramMiniAppServicer(object):
    """Telegram Mini App Service Definition
    """

    def InitData(self, request, context):
        """Method to initialize the Mini App with init_data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Method to send a text message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserInfo(self, request, context):
        """Method to get user info by user ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateChat(self, request, context):
        """Method to create a new chat (private or group)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChatsForUser(self, request, context):
        """Method to get all chats the user is part of
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessagesFromChat(self, request, context):
        """Method to get messages from a chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMediaMessage(self, request, context):
        """Method to send media messages (photo, video, etc.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMessage(self, request, context):
        """Method to delete a message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBotInfo(self, request, context):
        """Method to get bot's information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinChat(self, request, context):
        """Method to join a chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveChat(self, request, context):
        """Method to leave a chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PinMessage(self, request, context):
        """Method to pin a message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnpinMessage(self, request, context):
        """Method to unpin a message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessPayment(self, request, context):
        """Method to process a payment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TelegramMiniAppServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitData': grpc.unary_unary_rpc_method_handler(
                    servicer.InitData,
                    request_deserializer=api__pb2.InitDataRequest.FromString,
                    response_serializer=api__pb2.InitDataResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=api__pb2.SendMessageRequest.FromString,
                    response_serializer=api__pb2.SendMessageResponse.SerializeToString,
            ),
            'GetUserInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserInfo,
                    request_deserializer=api__pb2.GetUserInfoRequest.FromString,
                    response_serializer=api__pb2.GetUserInfoResponse.SerializeToString,
            ),
            'CreateChat': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateChat,
                    request_deserializer=api__pb2.CreateChatRequest.FromString,
                    response_serializer=api__pb2.CreateChatResponse.SerializeToString,
            ),
            'GetChatsForUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChatsForUser,
                    request_deserializer=api__pb2.GetChatsForUserRequest.FromString,
                    response_serializer=api__pb2.GetChatsResponse.SerializeToString,
            ),
            'GetMessagesFromChat': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessagesFromChat,
                    request_deserializer=api__pb2.GetMessagesFromChatRequest.FromString,
                    response_serializer=api__pb2.GetMessagesResponse.SerializeToString,
            ),
            'SendMediaMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMediaMessage,
                    request_deserializer=api__pb2.SendMediaMessageRequest.FromString,
                    response_serializer=api__pb2.SendMediaMessageResponse.SerializeToString,
            ),
            'DeleteMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMessage,
                    request_deserializer=api__pb2.DeleteMessageRequest.FromString,
                    response_serializer=api__pb2.DeleteMessageResponse.SerializeToString,
            ),
            'GetBotInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBotInfo,
                    request_deserializer=api__pb2.GetBotInfoRequest.FromString,
                    response_serializer=api__pb2.GetBotInfoResponse.SerializeToString,
            ),
            'JoinChat': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinChat,
                    request_deserializer=api__pb2.JoinChatRequest.FromString,
                    response_serializer=api__pb2.JoinChatResponse.SerializeToString,
            ),
            'LeaveChat': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveChat,
                    request_deserializer=api__pb2.LeaveChatRequest.FromString,
                    response_serializer=api__pb2.LeaveChatResponse.SerializeToString,
            ),
            'PinMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.PinMessage,
                    request_deserializer=api__pb2.PinMessageRequest.FromString,
                    response_serializer=api__pb2.PinMessageResponse.SerializeToString,
            ),
            'UnpinMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.UnpinMessage,
                    request_deserializer=api__pb2.UnpinMessageRequest.FromString,
                    response_serializer=api__pb2.UnpinMessageResponse.SerializeToString,
            ),
            'ProcessPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessPayment,
                    request_deserializer=api__pb2.ProcessPaymentRequest.FromString,
                    response_serializer=api__pb2.ProcessPaymentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qiba.TelegramMiniApp', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qiba.TelegramMiniApp', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TelegramMiniApp(object):
    """Telegram Mini App Service Definition
    """

    @staticmethod
    def InitData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/InitData',
            api__pb2.InitDataRequest.SerializeToString,
            api__pb2.InitDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/SendMessage',
            api__pb2.SendMessageRequest.SerializeToString,
            api__pb2.SendMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/GetUserInfo',
            api__pb2.GetUserInfoRequest.SerializeToString,
            api__pb2.GetUserInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/CreateChat',
            api__pb2.CreateChatRequest.SerializeToString,
            api__pb2.CreateChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChatsForUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/GetChatsForUser',
            api__pb2.GetChatsForUserRequest.SerializeToString,
            api__pb2.GetChatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMessagesFromChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/GetMessagesFromChat',
            api__pb2.GetMessagesFromChatRequest.SerializeToString,
            api__pb2.GetMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMediaMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/SendMediaMessage',
            api__pb2.SendMediaMessageRequest.SerializeToString,
            api__pb2.SendMediaMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/DeleteMessage',
            api__pb2.DeleteMessageRequest.SerializeToString,
            api__pb2.DeleteMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBotInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/GetBotInfo',
            api__pb2.GetBotInfoRequest.SerializeToString,
            api__pb2.GetBotInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JoinChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/JoinChat',
            api__pb2.JoinChatRequest.SerializeToString,
            api__pb2.JoinChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LeaveChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/LeaveChat',
            api__pb2.LeaveChatRequest.SerializeToString,
            api__pb2.LeaveChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PinMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/PinMessage',
            api__pb2.PinMessageRequest.SerializeToString,
            api__pb2.PinMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnpinMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/UnpinMessage',
            api__pb2.UnpinMessageRequest.SerializeToString,
            api__pb2.UnpinMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.TelegramMiniApp/ProcessPayment',
            api__pb2.ProcessPaymentRequest.SerializeToString,
            api__pb2.ProcessPaymentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class GameServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartGame = channel.unary_unary(
                '/qiba.GameService/StartGame',
                request_serializer=api__pb2.StartGameRequest.SerializeToString,
                response_deserializer=api__pb2.StartGameResponse.FromString,
                _registered_method=True)
        self.Spawn = channel.unary_unary(
                '/qiba.GameService/Spawn',
                request_serializer=api__pb2.SpawnRequest.SerializeToString,
                response_deserializer=api__pb2.SpawnResponse.FromString,
                _registered_method=True)
        self.Tap = channel.unary_unary(
                '/qiba.GameService/Tap',
                request_serializer=api__pb2.TapRequest.SerializeToString,
                response_deserializer=api__pb2.TapResponse.FromString,
                _registered_method=True)
        self.EndGame = channel.unary_unary(
                '/qiba.GameService/EndGame',
                request_serializer=api__pb2.EndGameRequest.SerializeToString,
                response_deserializer=api__pb2.EndGameResponse.FromString,
                _registered_method=True)
        self.CanPlay = channel.unary_unary(
                '/qiba.GameService/CanPlay',
                request_serializer=api__pb2.CanPlayGameRequest.SerializeToString,
                response_deserializer=api__pb2.CanPlayGameResponse.FromString,
                _registered_method=True)
        self.Leaderboard = channel.unary_unary(
                '/qiba.GameService/Leaderboard',
                request_serializer=api__pb2.LeaderboardRequest.SerializeToString,
                response_deserializer=api__pb2.LeaderboardResponse.FromString,
                _registered_method=True)
        self.GameTime = channel.unary_unary(
                '/qiba.GameService/GameTime',
                request_serializer=api__pb2.GameTimeRequest.SerializeToString,
                response_deserializer=api__pb2.GameTimeResponse.FromString,
                _registered_method=True)
        self.MaxPlays = channel.unary_unary(
                '/qiba.GameService/MaxPlays',
                request_serializer=api__pb2.MaxPlaysRequest.SerializeToString,
                response_deserializer=api__pb2.MaxPlaysResponse.FromString,
                _registered_method=True)
        self.PlayCount = channel.unary_unary(
                '/qiba.GameService/PlayCount',
                request_serializer=api__pb2.PlayCountRequest.SerializeToString,
                response_deserializer=api__pb2.PlayCountResponse.FromString,
                _registered_method=True)
        self.PlaysLeft = channel.unary_unary(
                '/qiba.GameService/PlaysLeft',
                request_serializer=api__pb2.PlaysLeftRequest.SerializeToString,
                response_deserializer=api__pb2.PlaysLeftResponse.FromString,
                _registered_method=True)


class GameServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Spawn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Tap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CanPlay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Leaderboard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GameTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MaxPlays(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlayCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlaysLeft(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartGame': grpc.unary_unary_rpc_method_handler(
                    servicer.StartGame,
                    request_deserializer=api__pb2.StartGameRequest.FromString,
                    response_serializer=api__pb2.StartGameResponse.SerializeToString,
            ),
            'Spawn': grpc.unary_unary_rpc_method_handler(
                    servicer.Spawn,
                    request_deserializer=api__pb2.SpawnRequest.FromString,
                    response_serializer=api__pb2.SpawnResponse.SerializeToString,
            ),
            'Tap': grpc.unary_unary_rpc_method_handler(
                    servicer.Tap,
                    request_deserializer=api__pb2.TapRequest.FromString,
                    response_serializer=api__pb2.TapResponse.SerializeToString,
            ),
            'EndGame': grpc.unary_unary_rpc_method_handler(
                    servicer.EndGame,
                    request_deserializer=api__pb2.EndGameRequest.FromString,
                    response_serializer=api__pb2.EndGameResponse.SerializeToString,
            ),
            'CanPlay': grpc.unary_unary_rpc_method_handler(
                    servicer.CanPlay,
                    request_deserializer=api__pb2.CanPlayGameRequest.FromString,
                    response_serializer=api__pb2.CanPlayGameResponse.SerializeToString,
            ),
            'Leaderboard': grpc.unary_unary_rpc_method_handler(
                    servicer.Leaderboard,
                    request_deserializer=api__pb2.LeaderboardRequest.FromString,
                    response_serializer=api__pb2.LeaderboardResponse.SerializeToString,
            ),
            'GameTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GameTime,
                    request_deserializer=api__pb2.GameTimeRequest.FromString,
                    response_serializer=api__pb2.GameTimeResponse.SerializeToString,
            ),
            'MaxPlays': grpc.unary_unary_rpc_method_handler(
                    servicer.MaxPlays,
                    request_deserializer=api__pb2.MaxPlaysRequest.FromString,
                    response_serializer=api__pb2.MaxPlaysResponse.SerializeToString,
            ),
            'PlayCount': grpc.unary_unary_rpc_method_handler(
                    servicer.PlayCount,
                    request_deserializer=api__pb2.PlayCountRequest.FromString,
                    response_serializer=api__pb2.PlayCountResponse.SerializeToString,
            ),
            'PlaysLeft': grpc.unary_unary_rpc_method_handler(
                    servicer.PlaysLeft,
                    request_deserializer=api__pb2.PlaysLeftRequest.FromString,
                    response_serializer=api__pb2.PlaysLeftResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qiba.GameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qiba.GameService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GameService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.GameService/StartGame',
            api__pb2.StartGameRequest.SerializeToString,
            api__pb2.StartGameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Spawn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.GameService/Spawn',
            api__pb2.SpawnRequest.SerializeToString,
            api__pb2.SpawnResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Tap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.GameService/Tap',
            api__pb2.TapRequest.SerializeToString,
            api__pb2.TapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EndGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.GameService/EndGame',
            api__pb2.EndGameRequest.SerializeToString,
            api__pb2.EndGameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CanPlay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.GameService/CanPlay',
            api__pb2.CanPlayGameRequest.SerializeToString,
            api__pb2.CanPlayGameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Leaderboard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.GameService/Leaderboard',
            api__pb2.LeaderboardRequest.SerializeToString,
            api__pb2.LeaderboardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GameTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.GameService/GameTime',
            api__pb2.GameTimeRequest.SerializeToString,
            api__pb2.GameTimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MaxPlays(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.GameService/MaxPlays',
            api__pb2.MaxPlaysRequest.SerializeToString,
            api__pb2.MaxPlaysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlayCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.GameService/PlayCount',
            api__pb2.PlayCountRequest.SerializeToString,
            api__pb2.PlayCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlaysLeft(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.GameService/PlaysLeft',
            api__pb2.PlaysLeftRequest.SerializeToString,
            api__pb2.PlaysLeftResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ReferralServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Referral = channel.unary_unary(
                '/qiba.ReferralService/Referral',
                request_serializer=api__pb2.ReferralRequest.SerializeToString,
                response_deserializer=api__pb2.ReferralResponse.FromString,
                _registered_method=True)
        self.AcceptReferral = channel.unary_unary(
                '/qiba.ReferralService/AcceptReferral',
                request_serializer=api__pb2.AcceptReferralRequest.SerializeToString,
                response_deserializer=api__pb2.AcceptReferralResponse.FromString,
                _registered_method=True)
        self.ReferralStatistics = channel.unary_unary(
                '/qiba.ReferralService/ReferralStatistics',
                request_serializer=api__pb2.ReferralStatisticsRequest.SerializeToString,
                response_deserializer=api__pb2.ReferralStatisticsResponse.FromString,
                _registered_method=True)


class ReferralServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Referral(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptReferral(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReferralStatistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReferralServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Referral': grpc.unary_unary_rpc_method_handler(
                    servicer.Referral,
                    request_deserializer=api__pb2.ReferralRequest.FromString,
                    response_serializer=api__pb2.ReferralResponse.SerializeToString,
            ),
            'AcceptReferral': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptReferral,
                    request_deserializer=api__pb2.AcceptReferralRequest.FromString,
                    response_serializer=api__pb2.AcceptReferralResponse.SerializeToString,
            ),
            'ReferralStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.ReferralStatistics,
                    request_deserializer=api__pb2.ReferralStatisticsRequest.FromString,
                    response_serializer=api__pb2.ReferralStatisticsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qiba.ReferralService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('qiba.ReferralService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ReferralService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Referral(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.ReferralService/Referral',
            api__pb2.ReferralRequest.SerializeToString,
            api__pb2.ReferralResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AcceptReferral(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.ReferralService/AcceptReferral',
            api__pb2.AcceptReferralRequest.SerializeToString,
            api__pb2.AcceptReferralResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReferralStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/qiba.ReferralService/ReferralStatistics',
            api__pb2.ReferralStatisticsRequest.SerializeToString,
            api__pb2.ReferralStatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
